Bundle 'astashov/vim-ruby-debugger'
Bundle 'godlygeek/tabular'
Bundle 'msanders/snipmate.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'scrooloose/nerdtree'
Bundle 'timcharper/textile.vim'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-endwise'
Bundle 'tsaleh/vim-matchit'
Bundle 'tsaleh/vim-shoulda'
Bundle 'tsaleh/vim-tmux'
Bundle 'vim-ruby/vim-ruby'
Bundle 'vim-scripts/Gist.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'othree/html5.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'itspriddle/vim-jquery'
Bundle 'tpope/vim-rvm'
Bundle 'mileszs/ack.vim'
Bundle 'vim-scripts/vimspell'
Bundle 'gregsexton/MatchTag'
Bundle 'scrooloose/nerdcommenter'
Bundle 'itchyny/lightline.vim'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-speeddating'
"Bundle 'tobiassvn/vim-gemfile'
Bundle 'kien/ctrlp.vim'
"Bundle 'airblade/vim-gitgutter'
Bundle 'thoughtbot/vim-rspec'
Bundle 'slim-template/vim-slim.git'
Bundle 'nono/vim-handlebars'
Bundle 'mxw/vim-jsx'

" Go
Bundle 'fatih/vim-go'
"Bundle 'Blackrush/vim-gocode.git'
Bundle 'Shougo/neocomplete.vim'
Bundle 'majutsushi/tagbar'

Bundle 'IndentAnything'
Bundle 'closetag.vim'
Bundle 'tComment'
Bundle 'IndexedSearch'
Bundle 'jQuery'
Bundle 'RDoc'
call vundle#end()
filetype plugin indent on

" sane movement with wrap turned on
if (&textwidth < 50)
    nnoremap j gj
    nnoremap k gk
    vnoremap j gj
    vnoremap k gk
    nnoremap <Down> gj
    nnoremap <Up> gk
    vnoremap <Down> gj
    vnoremap <Up> gk
    inoremap <Down> <C-o>gj
    inoremap <Up> <C-o>gk
endif

autocmd Bufread,BufNewFile *.py* set ft=python
"autocmd Bufread,BufNewFile *.html set ft=php
autocmd Bufread,BufNewFile *.ctp* set ft=php
autocmd Bufread,BufNewFile *.php* set ft=php
autocmd Bufread,BufNewFile *.xml* set ft=xml
autocmd Bufread,BufNewFile *.sql* set ft=mysql
autocmd Bufread,BufNewFile *.java* set ft=java
autocmd Bufread,BufNewFile *.rb set ft=ruby
autocmd Bufread,BufNewFile *.jbuilder* set ft=ruby
autocmd Bufread,BufNewFile *.xml.builder* set ft=ruby
autocmd Bufread,BufNewFile *.slim set ft=slim
autocmd Bufread,BufNewFile *.go set ft=go
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd filetype python set expandtab
autocmd filetype html,xml set listchars-=tab:>Â·
autocmd filetype go set nolist

" Fix poor spec-file highlight finder
autocmd BufRead,BufNewFile *_\(spec\|shared_example\).rb syn keyword rubyRspec described_class shared_examples expect to double with describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function

" All things tab
let tabBlacklist = ['go']
set softtabstop=2
set shiftwidth=2
set tabstop=4
set expandtab
set nosmarttab

autocmd filetype go set tabstop=2
autocmd filetype go set noexpandtab
autocmd filetype go set smarttab

" Clear hlsearch highlights
noremap <F6> :let @/=""<CR>:echo "Highlights Cleared"<CR>
:nnoremap <CR> :nohlsearch<cr>

let html_my_rendering = 1
highlight htmlBold cterm=bold
highlight htmlBoldUnderline cterm=bold,underline
highlight htmlBoldUnderlineItalic cterm=bold,underline ctermfg=DarkGray ctermbg=NONE
highlight htmlUnderline cterm=underline
highlight htmlUnderlineItalic cterm=underline ctermfg=DarkGray ctermbg=NONE
highlight htmlItalic ctermfg=DarkGray ctermbg=NONE

" Allow for split window expand / collapse using CTRL-j / CTRL-k.  Useful for
" editing many files in one window, switching back and forth.
map <A-J> <c-w>j<c-w>_
map <A-K> <c-w>k<c-w>_
imap <c-l> <space>=><space>
set winminheight=0

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function StripWhitespace()
    exec ':%s/ \+$//gc'
endfunction
map <s-s> :call StripWhitespace()<CR>

" ---------------------------------------------------------------------------
"  Command-T
" ---------------------------------------------------------------------------

"let g:CommandTMaxHeight=15
"let g:CommandTMatchWindowReverse=1

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](vendor[\/]rails)',
  \ }

map <leader>s :w\|:!%<cr>


let g:tagbar_ctags_bin = "/usr/local/Cellar/ctags/5.8_1/bin/ctags"
let g:tagbar_left = 1
nnoremap <Leader>ct :TagbarToggle<cr>
nnoremap <F8> :TagbarToggle<cr>

" Neocomplete thangs
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
set completeopt-=preview
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
autocmd FileType ruby nested NeoCompleteLock
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? "\<C-y>" : "\<CR>"
  "return neocomplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

 let g:neocomplete#sources#syntax#min_keyword_length = 3
