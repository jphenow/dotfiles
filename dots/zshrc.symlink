# Did the same in bash
# TODO sync these two so we don't have unnecessary vars laying about
export DOT=$HOME/git/dotfiles

# your project folder that we can `c [tab]` to
# export PROJECTS=~/workspace

source $DOT/shell/config.zsh

for config_file ($DOT/dependencies/*.zsh) do
  source $config_file
done

for config_file ($DOT/lib/*.zsh) do
  source $config_file
done

# source every .zsh file in this rep
for config_file ($DOT/shell/*.zsh) do
  source $config_file
done

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for config_file ($DOT/**/completion/*.sh) source $config_file

# Add Homebrew the $PATH
export PATH=/usr/local/bin:$PATH

# solves issues with rake having mismatched versions with what Gemfile.lock expects
rake() {
  if [[ -e ./Gemfile ]] && which bundle; then
    bundle exec rake "$@"
  else
    command rake "$@"
  fi
}

# `work foo` to navigate to SHARED_WORKSPACE/foo.
work() {
  dir=$(workspace)
  cd "$dir/${1}"
}

# Used by work() and _work() to determine workspace your projects live in. Set
# the SHARED_WORKSPACE environment variable if this is not ~/workspace/.
workspace() {
  result=$([ -s "$SHARED_WORKSPACE" ] && echo $SHARED_WORKSPACE || echo "$HOME/workspace")
  echo "$result"
}

# bash completion function for work(). Allows you to type `work f` to
# auto-complete to `work foo`, following standard Bash directory-completion
# rules.
_work() {
  local cur
  local trim
  local dir=$(workspace)
  cur=${COMP_WORDS[COMP_CWORD]}
  # length of expanded path, used to trim off first portion of matched paths below
  trim=`echo $dir/ | wc -c`
  # perform completion, returning all directories in workspace, trimming off the path to the workspace
  COMPREPLY=( $( compgen -S/ -d $dir/$cur | cut -b $trim- ) )
}

# enable completion for work() function using _work(), but only if `complete` exists
command -v complete > /dev/null && complete -o nospace -F _work work

# necessary for mysql gem when using mysql 5.5 on mac os x
export DYLD_LIBRARY_PATH="/usr/local/mysql/lib/:$DYLD_LIBRARY_PATH"

#########################
### TST Media install ###
####### THE END #########
#########################

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# Set terminal window name to current git repo (and branch) or current directory
git-repo() {
  git remote -v | grep '(fetch)' | awk '{ print $2 }' | awk -F/ '{print $NF }' | sed "s,\.git,,"
}

git-branch() {
  git branch | grep \* | cut -c 3-
}

git-term() {
  title "`git-repo`: `git-branch`"
}

mpwd () {
  pwd | sed "s,$HOME,~,"
}

term_tab_name() {
  git remote >/dev/null 2>&1
  if (($?)); then
    title "`mpwd`"
  else
    git-term
  fi
}

# Use a bash hook rather than aliasing 'cd'
#export PROMPT_COMMAND="term-tab-name; $PROMPT_COMMAND"
precmd() {
  term_tab_name
}

[ -s "/Users/jonphenow/.dnx/dnvm/dnvm.sh" ] && . "/Users/jonphenow/.dnx/dnvm/dnvm.sh" # Load dnvm

source $DOT/shell/theme.zsh-theme
