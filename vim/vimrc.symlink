" Jon Phenow's .vmrc

" Static plugins
" TODO replace with pathogen autoloads
source ~/.vim/plugin/Align.vim
source ~/.vim/plugin/AlignMaps.vim
source ~/.vim/plugin/VisualSearch.vim
source ~/.vim/plugin/CamelCaseMotion.vim
"source ~/.vim/plugin/NERD_commenter.vim
source ~/.vim/plugin/lodgeit.vim
source ~/.vim/plugin/scmdiff.vim
source ~/.vim/plugin/gitignore.vim

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle
 " required!
Plugin 'gmarik/Vundle.vim'
Plugin 'cespare/vim-toml'
Plugin 'astashov/vim-ruby-debugger'
Plugin 'godlygeek/tabular'
Plugin 'msanders/snipmate.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'scrooloose/nerdtree'
Plugin 'timcharper/textile.vim'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-endwise'
"Plugin 'tsaleh/vim-matchit'
Plugin 'tsaleh/vim-shoulda'
Plugin 'tsaleh/vim-tmux'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/Gist.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'othree/html5.vim'
Plugin 'kchmck/vim-coffee-script'
"Plugin 'cakebaker/scss-syntax.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'itspriddle/vim-jquery'
Plugin 'tpope/vim-rvm'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/vimspell'
Plugin 'gregsexton/MatchTag'
Plugin 'scrooloose/nerdcommenter'
Plugin 'itchyny/lightline.vim'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-speeddating'
"Plugin 'rson/vim-conque'
"Plugin 'skwp/vim-ruby-conque'
Plugin 'yaymukund/vim-rabl'
"Plugin 'tobiassvn/vim-gemfile'
Plugin 'kien/ctrlp.vim'
"Plugin 'airblade/vim-gitgutter'
Plugin 'thoughtbot/vim-rspec'
Plugin 'slim-template/vim-slim.git'
Plugin 'nono/vim-handlebars'
Plugin 'jnwhiteh/vim-golang'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-jdaddy'
Plugin 'rking/ag.vim'
Plugin 'wting/rust.vim'

let g:rspec_command = "Dispatch rspec {spec}"

Plugin 'IndentAnything'
Plugin 'closetag.vim'
Plugin 'tComment'
Plugin 'IndexedSearch'
Plugin 'jQuery'
Plugin 'RDoc'
" https://github.com/myusuf3/numbers.vim.git

" git_old_bundles = %w[
"   git://github.com/skwp/vim-rspec.git
"   git://github.com/tsaleh/taskpaper.vim.git
"   git://github.com/tpope/vim-vividchalk.git
"   git://github.com/hallison/vim-rdoc.git
"   git://github.com/ervandew/supertab.git
" ]
" " All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" " To ignore plugin indent changes, instead use:
" "filetype plugin on

nmap <silent> ]h :<C-U>execute v:count1 . "GitGutterNextHunk"<CR>
nmap <silent> [h :<C-U>execute v:count1 . "GitGutterPrevHunk"<CR>

" Enable vim powers
set nocompatible
setlocal formatoptions=ctnqro
setlocal comments+=n:*,n:#
if $TMUX == ''
  set clipboard=unnamed
endif

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" Quick shortcut for main sesion store
nmap SQ <ESC>:mksession! ~/.vim/Session.vim<CR>:wqa<CR>

" Configure :Align
call AlignCtrl( 'p1P1l+','=>', '=' )
"map <c-a> vip:Align<cr>

" Fix large paste
set pastetoggle=<F2>

" use ';' rather than ':' for w or wq
nnoremap ; :

" Fix paragraph
vmap Q gq
nmap Q gqap

" Forget arrow keys, bitch
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Finally can sudo after a file is openned
cmap w!! w !sudo tee % >/dev/null

" Be able to scroll wrapped lines of text
nnoremap j gj
nnoremap k gk


" change the mapleader from \ to ,
let mapleader=","

" exit to normal mode with 'jj'
inoremap jj <ESC>
inoremap kk <ESC>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" sane movement with wrap turned on
if (&textwidth < 50)
    nnoremap j gj
    nnoremap k gk
    vnoremap j gj
    vnoremap k gk
    nnoremap <Down> gj
    nnoremap <Up> gk
    vnoremap <Down> gj
    vnoremap <Up> gk
    inoremap <Down> <C-o>gj
    inoremap <Up> <C-o>gk
endif

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
:command! RenameFile :call RenameFile()
map <leader>q :RenameFile<cr>

" Promot Variable to Rspec let
function! PromoteToLet()
  :normal! dd
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS DESTROY ALL SOFTWARE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_shared_example.rb\)$') != -1
  if in_test_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  if match(a:filename, '\.feature$') != -1
    exec ":!script/features " . a:filename
  else
    if filereadable("script/test")
      exec ":!script/test " . a:filename
    elseif filereadable("Gemfile")
      exec ":!bundle exec rspec --color " . a:filename
    else
      exec ":!rspec --color " . a:filename
    end
  end
endfunction
map <leader>r :call RunTestFile()<cr>
map <leader>R :call RunNearestTest()<cr>
"map <leader>a :call RunTests('')<cr>
map <leader>A :w\|:!script/features<cr>
map <leader>w :w\|:!script/features --profile wip<cr>

nnoremap <leader>a :Ag<space>


" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
"Indents
set autoindent
set copyindent
set smartindent
set shiftround

" All things tab
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set textwidth=0
set virtualedit=block      " allow virtual edit in visual block ..

" Clear hlsearch highlights
noremap <F6> :let @/=""<CR>:echo "Highlights Cleared"<CR>
:nnoremap <CR> :nohlsearch<cr>

" Spell checking
:map <F10> :setlocal spell! spell?<CR>
:set spellfile=~/.vim.spellfile.utf-8.add
:highlight clear SpellBad
:highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
:highlight clear SpellCap
:highlight SpellCap term=underline cterm=underline
:highlight clear SpellRare
:highlight SpellRare term=underline cterm=underline
:highlight clear SpellLocal
:highlight SpellLocal term=underline cterm=underline

" Save fold status.  TODO: Figure out how to prevent warning messages on * and :help
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview

" Shortcuts to vertical- or horizontal-split on filename
:command Hf :sp <cfile>    " can also be done with CTRL-w f
:command Vf :vsp <cfile>

" Allow for split window expand / collapse using CTRL-j / CTRL-k.  Useful for
" editing many files in one window, switching back and forth.
map <A-J> <c-w>j<c-w>_
map <A-K> <c-w>k<c-w>_
imap <c-l> <space>=><space>
set winminheight=0

" RUBY DEBUGGER
let g:ruby_debugger_progname = 'mvim'
let g:ruby_debugger_no_maps = 1

" Amendment to the window-switching tip above.  This allows them
" to be hidden out of sight for more real estate.
set hidden

" Begin switch mode code: handle either buffer or window c-j/c-k switches
function! MapForBuffers()
    noremap <c-j> :only<cr>:bnext<cr>
    inoremap <c-j> <esc>:only<cr>:bnext<cr>
    noremap <c-k> :only<cr>:bprev<cr>
    inoremap <c-k> <esc>:only<cr>:bprev<cr>
    :only
endfunction

function! MapForWindows()
    :unhide
    noremap <c-j> <c-w>j<c-w>_
    inoremap <c-j> <esc><c-w>j<c-w>_
    noremap <c-k> <c-w>k<c-w>_
    inoremap <c-k> <esc><c-w>k<c-w>_
endfunction

function! MapSwitchMode()
    if g:switchmode == "windows"
        call MapForWindows()
    else
        call MapForBuffers()
    endif
endfunction

let g:switchmode = "buffers"

" Same as MapForBuffers but calling ":only" blows up on start-up
noremap <c-j> :only<cr>:bnext<cr>
inoremap <c-j> <esc>:only<cr>:bnext<cr>
noremap <c-k> :only<cr>:bprev<cr>
inoremap <c-k> <esc>:only<cr>:bprev<cr>

function! ToggleSwitchMode()
    if g:switchmode == "windows"
        let g:switchmode = "buffers"
    else
        let g:switchmode = "windows"
    endif
    call MapSwitchMode()
endfunction

noremap <F4> :call ToggleSwitchMode()<cr>:echo "Switching mode now: " . g:switchmode<cr>
" End switch mode code

function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

" Handy buffer shortcuts
noremap <c-p> :call DeleteHiddenBuffers()<cr>
inoremap <c-p> <esc>:call DeleteHiddenBuffers()<cr>
noremap <c-c> :bd<cr>
inoremap <c-c> <esc>:bd<cr>
noremap <s-k> :ls<cr>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

set cursorline " highlight current line
hi cursorline guibg=#333333 " highlight bg color of current line
hi CursorColumn guibg=#333333 " highlight cursor

if has('cmdline_info')
    set ruler " show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
    set showcmd " show partial commands in status line and
    " selected characters/lines in visual mode
endif
if has('statusline')
set laststatus=2
    " Broken down into easily includeable segments
    set statusline=%<%f\ " Filename
    set statusline+=%w%h%m%r " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y] " filetype
    set statusline+=\ [%{getcwd()}] " current dir
    "set statusline+=\ [A=\%03.3b/H=\%02.2B] " ASCII / Hexadecimal value of char
    set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif

" Line numbers. Turn on at startup, F7 toggle
:set number
:map <F7> :set invnumber<CR>
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
"set backspace=indent,eol,start
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

" Match my brackets
set showmatch

" Fix my HID
set mouse=a

" CTags
set cpo+=d
set tags=./tags/all

" History
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak,*.pyc,*.class
set title
set visualbell
set noerrorbells

set nobackup
set noswapfile


" ----------------------------------------------------------------------------
" Colors
" ----------------------------------------------------------------------------
" Highlight the syntax!
"see http://ethanschoonover.com/solarized/vim-colors-solarized for
set t_Co=256
if &t_Co >= 256 || has("gui_running")
    "let g:solarized_termcolors=256
    colorscheme solarized
    call togglebg#map("<F4>")
    let g:solarized_termtrans=1
    let g:solarized_bold=1
    let g:solarized_underline=1
    let g:solarized_italic=1
    let g:solarized_visibility=1
endif

if &t_Co > 2 || has("gui_running")
    set background=dark
    syntax on
endif

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)

" Search
set noincsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch             " don't highlight searches
set visualbell             " shut the fuck up
"set noincsearch
"set hlsearch
" highlight Search ctermbg=LightGray


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace()
    exec ':%s/ \+$//gc'
endfunction
map <s-s> :call StripWhitespace()<CR>

" ---------------------------------------------------------------------------
"  Command-T
" ---------------------------------------------------------------------------

"let g:CommandTMaxHeight=15
"let g:CommandTMatchWindowReverse=1
"map <silent> <Leader>t :CommandT<cr>
"map <silent> <Leader>gm :CommandT app/models<cr>
"map <silent> <Leader>gc :CommandT app/controllers<cr>
"map <silent> <Leader>gv :CommandT app/views<cr>
"map <silent> <Leader>ge :CommandT app/helpers<cr>
"map <silent> <Leader>gl :CommandT lib<cr>
"map <silent> <Leader>gp :CommandT public<cr>
"map <silent> <Leader>gt :CommandT test<cr>
"map <silent> <Leader>gs :CommandT spec<cr>
"map <silent> <Leader>gd :CommandT db<cr>
"map <silent> <Leader>gC :CommandT config<cr>
"map <silent> <Leader>gV :CommandT vendor<cr>
"map <silent> <Leader>gF :CommandT factories<cr>
"map <silent> <Leader>gh :CommandT ~/<cr>
"map <silent> <Leader>gr :CommandT /<cr>
"map <silent> <Leader>z :CommandTFlush<cr>

map <silent> <Leader>t :CtrlP<cr>
map <silent> <Leader>t :CtrlP .<cr>
map <silent> <Leader>m :CtrlPMixed<cr>
map <silent> <Leader>z :ClearCtrlPCache<cr>\|:CtrlP<cr>
map <silent> <Leader>r :CtrlPMRU<cr>
map <silent> <Leader>b :CtrlPBuffer<cr>

map <silent> <Leader>gm :CtrlP app/models<cr>
map <silent> <Leader>gc :CtrlP app/controllers<cr>
map <silent> <Leader>gv :CtrlP app/views<cr>
map <silent> <Leader>ge :CtrlP app/helpers<cr>
map <silent> <Leader>gl :CtrlP lib<cr>
map <silent> <Leader>gp :CtrlP public<cr>
map <silent> <Leader>gt :CtrlP test<cr>
map <silent> <Leader>gs :CtrlP spec<cr>
map <silent> <Leader>gd :CtrlP db<cr>
map <silent> <Leader>gC :CtrlP config<cr>
map <silent> <Leader>gV :CtrlP vendor<cr>
map <silent> <Leader>gF :CtrlP factories<cr>
map <silent> <Leader>gh :CtrlP ~/<cr>
"nnoremap <silent> <leader>T :ClearCtrlPCache<cr>\|:CtrlP<cr>
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|**/bower_components\|tmp'

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-n>"
  endif
endfunction
" Tab wrapper
imap <silent> <tab> <c-r>=InsertTabWrapper()<CR>
imap <silent> <s-tab> <c-p>

" map <C-F> :Ack<space><C-r><C-w>

map <c-w>d :%s/\s*$//g \| :nohlsearch<cr>

" Bda -  Delete all open buffers.
command! -nargs=0 -bang Bda
      \ :call BufDeleteAll('<bang>')
function! BufDeleteAll(bang)
  let last_buffer = bufnr('$')
  let n = 1
  while n <= last_buffer
    if a:bang == '' && getbufvar(n, '&modified')
      echohl ErrorMsg
      echomsg 'No write since last change for buffer'
            \ n '(add ! to override)'
      echohl None
      return 0
    endif
    let n = n+1
  endwhile

  let delete_count = 0
  let n = 1
  while n <= last_buffer
    if buflisted(n)
      silent exe 'bdel' . a:bang . ' ' . n
      if ! buflisted(n)
        let delete_count = delete_count+1
      endif
    endif
    let n = n+1
  endwhile

  if delete_count == 1
    echomsg delete_count "buffer deleted"
  elseif delete_count > 1
    echomsg delete_count "buffers deleted"
  endif
endfunction

map <leader>a :Bda<cr>

" Want to turn fooBar into foo_bar? Press crs (coerce to snake_case). MixedCase
" (crm), camelCase (crc), snake_case (crs), and UPPER_CASE (cru) are all just 3
" keystrokes away. These commands support repeat.vim.
" Courtesy of vim-abolish

" Default Ruby-Conque Maps
"nmap <silent> <Leader>rcrr :call RunRubyCurrentFileConque()<CR>
"nmap <silent> <Leader>rc :call RunRspecCurrentFileConque()<CR>
"nmap <silent> <Leader>rcll :call RunRspecCurrentLineConque()<CR>
"nmap <silent> <Leader>rccc :call RunCucumberCurrentFileConque()<CR>
"nmap <silent> <Leader>rccl :call RunCucumberCurrentLineConque()<CR>
"nmap <silent> <Leader>rcRR :call RunRakeConque()<CR>
"nmap <silent> <Leader>rcrl :call RunLastConqueCommand()<CR>

map <leader>e :call RelatedSpecVOpen()<CR>
"nnoremap <silent> ,<C-s> :call RelatedSpecOpen()<CR>

" Cmd-Shift-R for RSpec
"nmap <silent> <D-R> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
"nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
"nmap <silent> ,<D-R> :call RunLastConqueCommand()<CR>

"map <leader>p :s/\:\<\(\w\+\)\>\s\+=>\s\+/\1: /g <cr>
"map <leader>l :%s/\:\<\(\w\+\)\>\s\+=>\s\+/\1: /g <cr>
"map <leader>pl :s/\<\(\w\+\)\>\:\s\+/\:\1 => /g <cr>
"map <leader>lp :%s/\<\(\w\+\)\>\:\s\+/\:\1 => /g <cr>

nnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>
hi OverLength ctermbg=none cterm=none
match OverLength /\%>80v/
fun! s:LongLineHLToggle()
 if !exists('w:longlinehl')
  let w:longlinehl = matchadd('ErrorMsg', '.\%>80v', 0)
  echo "Long lines highlighted"
 else
  call matchdelete(w:longlinehl)
  unl w:longlinehl
  echo "Long lines unhighlighted"
 endif
endfunction

nnoremap <Leader>h :call<SID>EightyLine()<cr>
fun! s:EightyLine()
 if !exists('w:eightyline')
  let w:eightyline = 1
  :set colorcolumn=80  " highlight three columns after 'textwidth'
  :highlight ColorColumn ctermbg=16 guibg=#000000
 else
  unl w:eightyline
  :set colorcolumn=80  " highlight three columns after 'textwidth'
  :highlight ColorColumn NONE
 endif
endfunction

map <leader>o :w\|:!bundle exec rake spec<cr>
map <Leader>i :call RunCurrentSpecFile()<CR>
map <Leader>u :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
"map <leader>i :w\|:!ft %<cr>

let g:lightline = {
      \   'component': {
      \     'readonly': '%{&readonly?"⭤":""}',
      \   },
      \   'component_function': {
      \     'filename': 'MyFilename',
      \   },
      \ }

function! MyFilename()
        return ('' != expand('%') ? expand('%') : '[No Name]')
endfunction

" Tweak filetypes
filetype plugin indent on
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Epix to return the cursor to position of last open session
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal g'\"" | endif

autocmd Bufread,BufNewFile *.py* set ft=python
autocmd Bufread,BufNewFile *.html set ft=html
autocmd Bufread,BufNewFile *.tmpl set ft=html
autocmd Bufread,BufNewFile *.ctp* set ft=php
autocmd Bufread,BufNewFile *.php* set ft=php
autocmd Bufread,BufNewFile *.xml* set ft=xml
autocmd Bufread,BufNewFile *.sql* set ft=mysql
autocmd Bufread,BufNewFile *.java* set ft=java
autocmd Bufread,BufNewFile *.jbuilder* set ft=ruby
autocmd Bufread,BufNewFile *.xml.builder* set ft=ruby
autocmd Bufread,BufNewFile Gemfile set ft=ruby
autocmd Bufread,BufNewFile *.slim set ft=slim
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd filetype python set expandtab
autocmd filetype html,xml set listchars-=tab:>.
au BufRead,BufNewFile *.go set filetype=go nolist
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4

"au FileType markdown set textwidth=115 formatoptions=t1
"au FileType markdown autocmd InsertEnter * set formatoptions+=a
"au FileType markdown autocmd InsertLeave * set formatoptions-=a
"au FileType markdown noremap Q gqip

" Fix poor spec-file highlight finder
autocmd BufRead,BufNewFile *_\(spec\|shared_example\).rb syn keyword rubyRspec described_class shared_examples expect to double with describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function

autocmd BufRead,BufNewFile Gemfile syn keyword rubyGemfile gem group source
highlight def link rubyGemfile Function

function s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

let html_my_rendering = 1
highlight htmlBold cterm=bold
highlight htmlBoldUnderline cterm=bold,underline
highlight htmlBoldUnderlineItalic cterm=bold,underline ctermfg=DarkGray ctermbg=NONE
highlight htmlUnderline cterm=underline
highlight htmlUnderlineItalic cterm=underline ctermfg=DarkGray ctermbg=NONE
highlight htmlItalic ctermfg=DarkGray ctermbg=NONE

set splitright
function! OpenRelatedSpec()
  let specfile=substitute(expand('%:r'), "app", "spec", "") . "_spec.rb"
  exec "vs " . specfile
endfunction
nmap <leader>e :call OpenRelatedSpec()<cr>

" Fix exc delay
set timeoutlen=1000 ttimeoutlen=0

" Toggle shortcut for NERDTree
map <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>

" Auto open nerdtree on no file
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
